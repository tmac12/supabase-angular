import{Ha as s,M as f,Ob as m,P as h,Rb as y,V as i,ea as p,i as b,oa as c}from"./chunk-46NUIZ3Q.js";import{d}from"./chunk-PYQTE2ZK.js";function u(o,e){let a=!e?.manualCleanup;a&&!e?.injector&&p(u);let r=a?e?.injector?.get(c)??i(c):null,t;e?.requireSync?t=s({kind:0}):t=s({kind:1,value:e?.initialValue});let l=o.subscribe({next:n=>t.set({kind:1,value:n}),error:n=>{if(e?.rejectErrors)throw n;t.set({kind:2,error:n})}});return r?.onDestroy(l.unsubscribe.bind(l)),m(()=>{let n=t();switch(n.kind){case 1:return n.value;case 2:throw n.error;case 0:throw new f(601,"`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.")}})}var F=(()=>{let e=class e{constructor(){this.supabase=i(y),this.shiftList=s([]),this.currentShift=s({name:"",color:"",created_at:"",start_time:"",end_time:"",id:void 0,owner_id:void 0})}saveShift(r){}updateColor(r){this.currentShift.update(t=>(t.color=r,t))}getShiftsObservable(){let r=this.supabase.getShifts();return b(r)}getShiftsSignal(){return u(this.getShiftsObservable())}getShiftsPromise(){return d(this,null,function*(){let{data:r,error:t}=yield this.supabase.getShifts();return t&&console.error(t),r})}};e.\u0275fac=function(t){return new(t||e)},e.\u0275prov=h({token:e,factory:e.\u0275fac,providedIn:"root"});let o=e;return o})();export{u as a,F as b};
